// Rule-Based Chatbot cho Th∆∞ Vi·ªán - ·ª®ng d·ª•ng ƒë∆°n gi·∫£n
class LibraryChatbotApp {
    constructor() {
        this.initializeElements();
        this.bindEvents();
        this.initializeRules();
        this.addHoverEffects();
    }

    initializeElements() {
        this.chatMessages = document.getElementById('chatMessages');
        this.userInput = document.getElementById('userInput');
        this.sendBtn = document.getElementById('sendBtn');
        this.quickBtns = document.querySelectorAll('.quick-btn');
    }

    bindEvents() {
        this.sendBtn.addEventListener('click', () => this.sendMessage());
        this.userInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this.sendMessage();
            }
        });
        
        this.quickBtns.forEach(btn => {
            btn.addEventListener('click', (e) => {
                const question = e.target.getAttribute('data-question');
                this.userInput.value = question;
                this.sendMessage();
            });
        });

        // Auto-focus on input when clicking anywhere in chat
        this.chatMessages.addEventListener('click', () => {
            this.userInput.focus();
        });
    }

    // ƒê·ªãnh nghƒ©a 12 quy t·∫Øc keyword-response cho th∆∞ vi·ªán
    initializeRules() {
        this.rules = [
            // Quy t·∫Øc 1: Gi·ªù m·ªü c·ª≠a
            {
                keywords: ['gi·ªù', 'm·ªü', 'c·ª≠a', 'th·ªùi gian', 'ho·∫°t ƒë·ªông', 'hours', 'open', 'time', 'khi n√†o'],
                response: "üïí <strong>Gi·ªù m·ªü c·ª≠a th∆∞ vi·ªán:</strong><br>‚Ä¢ Th·ª© 2 - Th·ª© 6: 8:00 s√°ng - 10:00 t·ªëi<br>‚Ä¢ Th·ª© 7 - Ch·ªß nh·∫≠t: 9:00 s√°ng - 8:00 t·ªëi<br>‚Ä¢ Th∆∞ vi·ªán m·ªü c·ª≠a t·∫•t c·∫£ c√°c ng√†y trong tu·∫ßn"
            },
            
            // Quy t·∫Øc 2: L√†m th·∫ª th∆∞ vi·ªán
            {
                keywords: ['l√†m', 'th·∫ª', 'ƒëƒÉng k√Ω', 'th√†nh vi√™n', 'card', 'register', 'membership', 't·∫°o th·∫ª'],
                response: "üÜî <strong>L√†m th·∫ª th∆∞ vi·ªán:</strong><br>‚Ä¢ Mang theo: CMND/CCCD + ·∫£nh 3x4<br>‚Ä¢ Ph√≠ l√†m th·∫ª: 50,000 VNƒê<br>‚Ä¢ Th·ªùi gian x·ª≠ l√Ω: 1-2 ng√†y l√†m vi·ªác<br>‚Ä¢ Th·∫ª c√≥ hi·ªáu l·ª±c 1 nƒÉm"
            },
            
            // Quy t·∫Øc 3: M∆∞·ª£n s√°ch
            {
                keywords: ['m∆∞·ª£n', 's√°ch', 'l·∫•y', 'borrow', 'book', 'lending', 'm∆∞·ª£n s√°ch'],
                response: "üìö <strong>Quy ƒë·ªãnh m∆∞·ª£n s√°ch:</strong><br>‚Ä¢ T·ªëi ƒëa: 5 cu·ªën s√°ch/ng∆∞·ªùi<br>‚Ä¢ Th·ªùi h·∫°n: 14 ng√†y (s√°ch th∆∞·ªùng), 30 ng√†y (s√°ch gi√°o tr√¨nh)<br>‚Ä¢ C·∫ßn c√≥ th·∫ª th∆∞ vi·ªán h·ª£p l·ªá<br>‚Ä¢ C√≥ th·ªÉ ƒë·∫∑t m∆∞·ª£n s√°ch ƒëang ƒë∆∞·ª£c m∆∞·ª£n"
            },
            
            // Quy t·∫Øc 4: Tr·∫£ s√°ch
            {
                keywords: ['tr·∫£', 's√°ch', 'ho√†n', 'return', 'give back', 'tr·∫£ s√°ch'],
                response: "‚Ü©Ô∏è <strong>H∆∞·ªõng d·∫´n tr·∫£ s√°ch:</strong><br>‚Ä¢ Tr·∫£ t·∫°i qu·∫ßy l∆∞u th√¥ng ho·∫∑c h·ªôp tr·∫£ s√°ch t·ª± ƒë·ªông<br>‚Ä¢ Ki·ªÉm tra t√¨nh tr·∫°ng s√°ch tr∆∞·ªõc khi tr·∫£<br>‚Ä¢ S√°ch tr·∫£ mu·ªôn s·∫Ω b·ªã ph·∫°t ph√≠<br>‚Ä¢ C√≥ th·ªÉ tr·∫£ s√°ch ngo√†i gi·ªù t·∫°i h·ªôp t·ª± ƒë·ªông"
            },
            
            // Quy t·∫Øc 5: Gia h·∫°n s√°ch
            {
                keywords: ['gia h·∫°n', 'k√©o d√†i', 'renew', 'extend', 'th√™m th·ªùi gian', 'gia h·∫°n s√°ch'],
                response: "üìÖ <strong>Gia h·∫°n s√°ch:</strong><br>‚Ä¢ Gia h·∫°n ƒë∆∞·ª£c 1 l·∫ßn qua website ho·∫∑c ƒëi·ªán tho·∫°i<br>‚Ä¢ Th·ªùi gian gia h·∫°n: 7 ng√†y<br>‚Ä¢ ƒêi·ªÅu ki·ªán: Kh√¥ng c√≥ ng∆∞·ªùi kh√°c ƒë·∫∑t m∆∞·ª£n<br>‚Ä¢ Ph√≠ gia h·∫°n: 5,000 VNƒê/cu·ªën"
            },
            
            // Quy t·∫Øc 6: Ph√≠ ph·∫°t
            {
                keywords: ['ph√≠', 'ph·∫°t', 'ti·ªÅn', 'fine', 'penalty', 'tr·∫£ mu·ªôn', 'ph√≠ ph·∫°t'],
                response: "‚ö†Ô∏è <strong>B·∫£ng ph√≠ ph·∫°t:</strong><br>‚Ä¢ Tr·∫£ s√°ch mu·ªôn: 2,000 VNƒê/ng√†y/cu·ªën<br>‚Ä¢ S√°ch m·∫•t: ƒê·ªÅn g·∫•p 2 l·∫ßn gi√° tr·ªã s√°ch<br>‚Ä¢ Ph√≠ ph·∫°t t·ªëi ƒëa: 100,000 VNƒê/cu·ªën<br>‚Ä¢ Thanh to√°n t·∫°i qu·∫ßy l∆∞u th√¥ng"
            },
            
            // Quy t·∫Øc 7: T√¨m s√°ch
            {
                keywords: ['t√¨m', 's√°ch', 't√¨m ki·∫øm', 'search', 'find', 'locate', 't√¨m s√°ch'],
                response: "üîç <strong>T√¨m ki·∫øm s√°ch:</strong><br>‚Ä¢ S·ª≠ d·ª•ng h·ªá th·ªëng OPAC tr√™n website th∆∞ vi·ªán<br>‚Ä¢ H·ªèi nh√¢n vi√™n t·∫°i qu·∫ßy th√¥ng tin<br>‚Ä¢ S√°ch ƒë∆∞·ª£c s·∫Øp x·∫øp theo m√£ ph√¢n lo·∫°i Dewey<br>‚Ä¢ C√≥ th·ªÉ ƒë·∫∑t m∆∞·ª£n s√°ch ƒëang ƒë∆∞·ª£c m∆∞·ª£n"
            },
            
            // Quy t·∫Øc 8: Quy ƒë·ªãnh th∆∞ vi·ªán
            {
                keywords: ['quy ƒë·ªãnh', 'n·ªôi quy', 'lu·∫≠t', 'rules', 'regulations', 'policy', 'quy ƒë·ªãnh'],
                response: "üìã <strong>N·ªôi quy th∆∞ vi·ªán:</strong><br>‚Ä¢ Kh√¥ng ƒÉn u·ªëng trong khu v·ª±c ƒë·ªçc s√°ch<br>‚Ä¢ Gi·ªØ im l·∫∑ng tuy·ªát ƒë·ªëi<br>‚Ä¢ T·∫Øt ƒëi·ªán tho·∫°i ho·∫∑c ƒë·ªÉ ch·∫ø ƒë·ªô im l·∫∑ng<br>‚Ä¢ Kh√¥ng mang t√∫i l·ªõn v√†o khu v·ª±c ƒë·ªçc s√°ch<br>‚Ä¢ Vi ph·∫°m s·∫Ω b·ªã c·∫£nh c√°o ho·∫∑c t·∫°m d·ª´ng th·∫ª"
            },
            
            // Quy t·∫Øc 9: D·ªãch v·ª• photocopy
            {
                keywords: ['photocopy', 'sao ch√©p', 'in ·∫•n', 'copy', 'print', 'photocopy'],
                response: "üìÑ <strong>D·ªãch v·ª• photocopy:</strong><br>‚Ä¢ V·ªã tr√≠: T·∫ßng 1 th∆∞ vi·ªán<br>‚Ä¢ Gi√°: 500 VNƒê/trang A4<br>‚Ä¢ Quy ƒë·ªãnh: Copy t·ªëi ƒëa 30% n·ªôi dung s√°ch<br>‚Ä¢ C·∫ßn xu·∫•t tr√¨nh th·∫ª th∆∞ vi·ªán<br>‚Ä¢ Thanh to√°n b·∫±ng ti·ªÅn m·∫∑t"
            },
            
            // Quy t·∫Øc 10: Wifi v√† m√°y t√≠nh
            {
                keywords: ['wifi', 'internet', 'm√°y t√≠nh', 'computer', 'm·∫°ng', 'wifi'],
                response: "üíª <strong>D·ªãch v·ª• c√¥ng ngh·ªá:</strong><br>‚Ä¢ WiFi mi·ªÖn ph√≠: Library_WiFi (m·∫≠t kh·∫©u: lib2024)<br>‚Ä¢ M√°y t√≠nh c√¥ng c·ªông: 20 m√°y t·∫°i t·∫ßng 2<br>‚Ä¢ Th·ªùi gian s·ª≠ d·ª•ng: 2 gi·ªù/phi√™n<br>‚Ä¢ C·∫ßn th·∫ª th∆∞ vi·ªán ƒë·ªÉ ƒëƒÉng nh·∫≠p<br>‚Ä¢ H·ªó tr·ª£ in ·∫•n t·ª´ m√°y t√≠nh"
            },
            
            // Quy t·∫Øc 11: ƒê·∫∑t ch·ªó ng·ªìi
            {
                keywords: ['ƒë·∫∑t', 'ch·ªó', 'b√†n', 'gh·∫ø', 'reserve', 'seat', 'place', 'ƒë·∫∑t ch·ªó'],
                response: "ü™ë <strong>ƒê·∫∑t ch·ªó ng·ªìi:</strong><br>‚Ä¢ ƒê·∫∑t qua app th∆∞ vi·ªán ho·∫∑c website<br>‚Ä¢ M·ªói ng∆∞·ªùi ƒë·∫∑t t·ªëi ƒëa 4 gi·ªù/ng√†y<br>‚Ä¢ ƒê·∫øn mu·ªôn qu√° 15 ph√∫t s·∫Ω m·∫•t ch·ªó<br>‚Ä¢ C√≥ th·ªÉ gia h·∫°n n·∫øu kh√¥ng c√≥ ng∆∞·ªùi kh√°c ƒë·∫∑t<br>‚Ä¢ Ch·ªó ng·ªìi ƒë∆∞·ª£c ƒë√°nh s·ªë r√µ r√†ng"
            },
            
            // Quy t·∫Øc 12: S·ª± ki·ªán v√† ho·∫°t ƒë·ªông
            {
                keywords: ['s·ª± ki·ªán', 'ho·∫°t ƒë·ªông', 'h·ªôi th·∫£o', 'event', 'activity', 'seminar', 's·ª± ki·ªán'],
                response: "üéâ <strong>S·ª± ki·ªán th∆∞ vi·ªán:</strong><br>‚Ä¢ H·ªôi th·∫£o h·ªçc thu·∫≠t h√†ng th√°ng<br>‚Ä¢ Tri·ªÉn l√£m s√°ch theo ch·ªß ƒë·ªÅ<br>‚Ä¢ Workshop k·ªπ nƒÉng h·ªçc t·∫≠p<br>‚Ä¢ Th√¥ng tin chi ti·∫øt tr√™n website v√† b·∫£ng th√¥ng b√°o<br>‚Ä¢ ƒêƒÉng k√Ω mi·ªÖn ph√≠ cho th√†nh vi√™n"
            }
        ];

        // C√¢u tr·∫£ l·ªùi m·∫∑c ƒë·ªãnh khi kh√¥ng t√¨m th·∫•y quy t·∫Øc ph√π h·ª£p
        this.defaultResponses = [
            "ü§î Xin l·ªói, t√¥i ch∆∞a hi·ªÉu c√¢u h·ªèi c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ gi·ªù m·ªü c·ª≠a, m∆∞·ª£n s√°ch, quy ƒë·ªãnh th∆∞ vi·ªán...",
            "‚ùì T√¥i kh√¥ng c√≥ th√¥ng tin v·ªÅ v·∫•n ƒë·ªÅ n√†y. Vui l√≤ng li√™n h·ªá nh√¢n vi√™n th∆∞ vi·ªán ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ chi ti·∫øt.",
            "üí° C√¢u h·ªèi c·ªßa b·∫°n n·∫±m ngo√†i ph·∫°m vi h·ªó tr·ª£ c·ªßa t√¥i. B·∫°n c√≥ th·ªÉ th·ª≠ h·ªèi v·ªÅ c√°c d·ªãch v·ª• c∆° b·∫£n c·ªßa th∆∞ vi·ªán.",
            "üîÑ T√¥i ch∆∞a ƒë∆∞·ª£c l·∫≠p tr√¨nh ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y. H√£y th·ª≠ h·ªèi v·ªÅ gi·ªù m·ªü c·ª≠a, m∆∞·ª£n tr·∫£ s√°ch, ho·∫∑c quy ƒë·ªãnh th∆∞ vi·ªán."
        ];
    }

    // G·ª≠i tin nh·∫Øn
    sendMessage() {
        const message = this.userInput.value.trim();
        if (!message) return;

        // Hi·ªÉn th·ªã tin nh·∫Øn ng∆∞·ªùi d√πng
        this.addMessage(message, 'user');
        this.userInput.value = '';

        // Hi·ªÉn th·ªã typing indicator
        this.showTypingIndicator();

        // X·ª≠ l√Ω ph·∫£n h·ªìi sau 1-2 gi√¢y (m√¥ ph·ªèng th·ªùi gian x·ª≠ l√Ω)
        const delay = Math.random() * 1000 + 1000; // 1-2 gi√¢y
        setTimeout(() => {
            this.hideTypingIndicator();
            const response = this.getResponse(message);
            this.addMessage(response, 'bot');
        }, delay);
    }

    // Th√™m tin nh·∫Øn v√†o chat
    addMessage(content, sender) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${sender}-message`;

        const contentDiv = document.createElement('div');
        contentDiv.className = 'message-content';

        if (sender === 'bot') {
            contentDiv.innerHTML = `
                <i class="fas fa-robot"></i>
                <div>${content}</div>
            `;
        } else {
            contentDiv.innerHTML = `
                <i class="fas fa-user"></i>
                <p>${content}</p>
            `;
        }

        messageDiv.appendChild(contentDiv);
        this.chatMessages.appendChild(messageDiv);

        // Cu·ªôn xu·ªëng cu·ªëi
        this.scrollToBottom();
    }

    // Hi·ªÉn th·ªã typing indicator
    showTypingIndicator() {
        const typingDiv = document.createElement('div');
        typingDiv.className = 'message bot-message typing-indicator';
        typingDiv.id = 'typingIndicator';
        typingDiv.innerHTML = `
            <div class="message-content">
                <i class="fas fa-robot"></i>
                <div class="typing-dots">
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                </div>
            </div>
        `;
        this.chatMessages.appendChild(typingDiv);
        this.scrollToBottom();
    }

    // ·∫®n typing indicator
    hideTypingIndicator() {
        const typingIndicator = document.getElementById('typingIndicator');
        if (typingIndicator) {
            typingIndicator.remove();
        }
    }

    // L·∫•y ph·∫£n h·ªìi d·ª±a tr√™n tin nh·∫Øn
    getResponse(message) {
        const lowerMessage = message.toLowerCase();
        
        // T√¨m quy t·∫Øc ph√π h·ª£p
        for (const rule of this.rules) {
            const matchedKeywords = rule.keywords.filter(keyword => 
                lowerMessage.includes(keyword.toLowerCase())
            );
            
            if (matchedKeywords.length > 0) {
                return rule.response;
            }
        }

        // N·∫øu kh√¥ng t√¨m th·∫•y quy t·∫Øc ph√π h·ª£p, tr·∫£ v·ªÅ c√¢u tr·∫£ l·ªùi m·∫∑c ƒë·ªãnh
        const randomIndex = Math.floor(Math.random() * this.defaultResponses.length);
        return this.defaultResponses[randomIndex];
    }

    // Cu·ªôn xu·ªëng cu·ªëi chat
    scrollToBottom() {
        this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
    }

    // Th√™m hi·ªáu ·ª©ng hover v√† t∆∞∆°ng t√°c
    addHoverEffects() {
        // Hi·ªáu ·ª©ng hover cho quick buttons
        this.quickBtns.forEach(btn => {
            btn.addEventListener('mouseenter', function() {
                this.style.transform = 'translateY(-3px)';
                this.style.boxShadow = '0 8px 25px rgba(102, 126, 234, 0.3)';
            });
            
            btn.addEventListener('mouseleave', function() {
                this.style.transform = 'translateY(0)';
                this.style.boxShadow = '0 2px 8px rgba(0,0,0,0.05)';
            });

            btn.addEventListener('mousedown', function() {
                this.style.transform = 'translateY(-1px)';
            });

            btn.addEventListener('mouseup', function() {
                this.style.transform = 'translateY(-3px)';
            });
        });

        // Hi·ªáu ·ª©ng focus cho input
        this.userInput.addEventListener('focus', function() {
            this.style.borderColor = '#667eea';
            this.style.background = 'white';
            this.style.boxShadow = '0 0 0 4px rgba(102, 126, 234, 0.1)';
            this.style.transform = 'translateY(-1px)';
        });
        
        this.userInput.addEventListener('blur', function() {
            this.style.borderColor = '#e9ecef';
            this.style.background = '#f8f9fa';
            this.style.boxShadow = 'none';
            this.style.transform = 'translateY(0)';
        });

        // Hi·ªáu ·ª©ng cho send button
        this.sendBtn.addEventListener('mouseenter', function() {
            this.style.transform = 'scale(1.05) translateY(-2px)';
            this.style.boxShadow = '0 8px 25px rgba(102, 126, 234, 0.4)';
        });

        this.sendBtn.addEventListener('mouseleave', function() {
            this.style.transform = 'scale(1) translateY(0)';
            this.style.boxShadow = '0 4px 15px rgba(102, 126, 234, 0.3)';
        });

        // Hi·ªáu ·ª©ng cho message cards
        const messageObserver = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                if (mutation.type === 'childList') {
                    mutation.addedNodes.forEach((node) => {
                        if (node.nodeType === 1 && node.classList.contains('message')) {
                            // Th√™m hi·ªáu ·ª©ng fade in cho tin nh·∫Øn m·ªõi
                            node.style.opacity = '0';
                            node.style.transform = 'translateY(20px)';
                            
                            setTimeout(() => {
                                node.style.transition = 'all 0.4s ease';
                                node.style.opacity = '1';
                                node.style.transform = 'translateY(0)';
                            }, 50);
                        }
                    });
                }
            });
        });

        messageObserver.observe(this.chatMessages, { childList: true });
    }
}

// Kh·ªüi t·∫°o chatbot khi trang ƒë∆∞·ª£c t·∫£i
document.addEventListener('DOMContentLoaded', () => {
    new LibraryChatbotApp();
});

// Th√™m m·ªôt s·ªë t√≠nh nƒÉng b·ªï sung
document.addEventListener('DOMContentLoaded', () => {
    // Auto-resize input khi nh·∫≠p nhi·ªÅu d√≤ng
    const userInput = document.getElementById('userInput');
    userInput.addEventListener('input', function() {
        this.style.height = 'auto';
        this.style.height = Math.min(this.scrollHeight, 100) + 'px';
    });

    // Th√™m hi·ªáu ·ª©ng loading khi g·ª≠i tin nh·∫Øn
    const sendBtn = document.getElementById('sendBtn');
    sendBtn.addEventListener('click', function() {
        this.style.transform = 'scale(0.95)';
        setTimeout(() => {
            this.style.transform = 'scale(1)';
        }, 150);
    });

    // Th√™m hi·ªáu ·ª©ng cho quick buttons khi click
    const quickBtns = document.querySelectorAll('.quick-btn');
    quickBtns.forEach(btn => {
        btn.addEventListener('click', function() {
            this.style.transform = 'scale(0.95)';
            setTimeout(() => {
                this.style.transform = 'scale(1)';
            }, 150);
        });
    });
});
